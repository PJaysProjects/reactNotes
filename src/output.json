{"nodes":[{"color":"00a500","files":[],"id":"0","label":"0: cmd","links":[],"name":"cmd","notes":[],"shape":"dot","x":624,"y":-205,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"1","label":"1: curl checkip.amazonaws.com","links":[],"name":"curl checkip.amazonaws.com","notes":[],"shape":"dot","x":482,"y":571,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"2","label":"2: curl qrenco.de/<url>","links":[],"name":"curl qrenco.de/<url>","notes":[],"shape":"dot","x":102,"y":441,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"3","label":"3: curl -s https://decapi.me/youtube/latest_video?user=<user>","links":[],"name":"curl -s https://decapi.me/youtube/latest_video?user=<user>","notes":[],"shape":"dot","x":485,"y":332,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"4","label":"4: curl -s https://decapi.me/twitter/latest?name=<twittername>","links":[],"name":"curl -s https://decapi.me/twitter/latest?name=<twittername>","notes":[],"shape":"dot","x":262,"y":652,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"5","label":"5: curl dict.org/d:<word>","links":[],"name":"curl dict.org/d:<word>","notes":[],"shape":"dot","x":280,"y":250,"val":4},{"color":"00a500","files":[],"id":"6","label":"6: start <url>","links":[],"name":"start <url>","notes":[],"shape":"dot","x":741,"y":-375,"val":4},{"color":"00a500","files":[],"id":"7","label":"7: F7 for list of previous commands","links":[],"name":"F7 for list of previous commands","notes":[],"shape":"dot","x":832,"y":-175,"val":4},{"color":"00a500","files":[],"id":"8","label":"8: shift right click on folder to open in terminal","links":[],"name":"shift right click on folder to open in terminal","notes":[],"shape":"dot","x":437,"y":-296,"val":4},{"color":"00a500","files":[],"id":"9","label":"9: netstat -a -b | grep :7777","links":[],"name":"netstat -a -b | grep :7777","notes":[],"shape":"dot","x":320,"y":78,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"10","label":"10: curl","links":[["https://curl.se/docs/manual.html",""]],"name":"curl","notes":[{"content":"As of my last update in September 2021, curl itself does not have a built-in way to directly reference a JSON file for the --data option. The --data option in curl is used to specify the data to be sent in the body of the HTTP request, and you typically provide the data directly within the command itself.<br><br>However, you can achieve the same effect by using command-line utilities to read the JSON file and pass its contents to the --data option of curl. One common way to do this on Unix-like systems (e.g., Linux or macOS) is by using the cat command along with process substitution.<br><br>Here's an example of how you can achieve this:<br><br>Assuming you have a JSON file called data.json, you can use the following command to send its contents as the data in a POST request:","timestamp":"2023-07-22 06:15:04.000328"},{"content":"curl -X POST -H \"Content-Type: application/json\" --data \"$(cat data.json)\" http://example.com/api/endpoint<br>","timestamp":"2023-07-22 06:15:09.000560"},{"content":"Explanation:<br><br>cat data.json: The cat command reads the content of data.json.<br>$(...): The process substitution $(...) allows the output of the cat command to be captured and used as an argument for the --data option in the curl command.<br>Keep in mind that if your JSON data contains double quotes, newlines, or special characters, you might encounter issues with the curl command. In such cases, you may need to escape or modify the data accordingly before passing it to curl.<br><br>Please note that features and functionalities might have changed beyond my last update, so it's always a good idea to check the latest curl documentation for any updates or new features.","timestamp":"2023-07-22 06:15:16.000137"},{"content":"<br>how about if I'm using windows 10 command prompt?","timestamp":"2023-07-22 06:15:20.000824"},{"content":"In Windows 10 Command Prompt, you can also use a similar approach to reference a JSON file for the --data part of a curl request. However, the syntax for reading and passing the file content will be slightly different compared to Unix-like systems.<br><br>Assuming you have a JSON file called data.json, you can use the following command to send its contents as the data in a POST request:","timestamp":"2023-07-22 06:15:25.000511"},{"content":"curl -X POST -H \"Content-Type: application/json\" --data \"@data.json\" http://example.com/api/endpoint<br>","timestamp":"2023-07-22 06:15:29.000064"},{"content":"Explanation:<br><br>--data \"@data.json\": The @ symbol is used in Windows Command Prompt to indicate that you want to read the data from a file named data.json and pass it as the body of the curl request.<br>Make sure that you are running this command from the same directory where the data.json file is located. Otherwise, you'll need to provide the full path to the file.<br><br>Additionally, ensure that you have installed curl and that it is accessible from the Command Prompt. If you haven't installed curl, you can download it from the official website or use a package manager like Chocolatey to install it.<br><br>Keep in mind that if your JSON data contains special characters, you might need to handle the escaping properly. If you encounter issues with the command, you can try escaping the data using single quotes or backslashes as needed.<br><br>As of my last update in September 2021, this approach should work for using curl with a JSON file in the Windows 10 Command Prompt. However, newer updates or versions of curl may introduce changes or additional features, so always refer to the latest documentation for accurate and up-to-date information.","timestamp":"2023-07-22 06:15:35.000864"},{"content":"what does -X POST do?","timestamp":"2023-07-22 06:15:39.000880"},{"content":"The -X POST option in curl is used to specify the HTTP request method that should be used when sending a request to the server. In this case, -X POST indicates that the curl command should perform an HTTP POST request.<br><br>HTTP methods, also known as HTTP verbs, are used to indicate the desired action to be performed on the resource identified by the URL. The most common HTTP methods are:<br><br>GET: Used to retrieve data from the server. This is the default method if no other method is specified.<br>POST: Used to send data to the server, typically to create a new resource on the server or perform some action that has a side effect (e.g., submitting a form).<br>PUT: Used to update an existing resource on the server.<br>DELETE: Used to delete a resource on the server.<br>PATCH: Used to partially update a resource on the server.<br>When you use curl with the -X POST option, it sends an HTTP POST request to the specified URL with the data provided using the --data or -d option. For example:","timestamp":"2023-07-22 06:15:46.000905"},{"content":"curl -X POST -H \"Content-Type: application/json\" --data '{\"name\": \"John\", \"age\": 30}' http://example.com/api/endpoint<br>","timestamp":"2023-07-22 06:15:51.000569"},{"content":"In this command, curl sends a POST request to http://example.com/api/endpoint with the JSON data {\"name\": \"John\", \"age\": 30} in the request body. The -H option sets the \"Content-Type\" header to indicate that the data being sent is in JSON format.<br><br>Keep in mind that the behavior of the server in response to different HTTP methods depends on the API or web application you are interacting with. It's essential to understand the expected behavior and the API documentation to use the appropriate HTTP method for your specific use case.","timestamp":"2023-07-22 06:15:58.000160"}],"shape":"dot","x":311,"y":449,"val":4},{"color":"00a500","files":[],"id":"11","label":"11: networking","links":[["https://www.yougetsignal.com/tools/open-ports/","Port checker"]],"name":"networking","notes":[],"shape":"dot","x":468,"y":-63,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"12","label":"12: python","links":[],"name":"python","notes":[],"shape":"dot","x":1024,"y":539,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"13","label":"13: sys.exec_prefix","links":[],"name":"sys.exec_prefix","notes":[],"shape":"dot","x":868,"y":671,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"14","label":"14: visjs","links":[["https://ww3.arb.ca.gov/ei/tools/lib/vis/docs/network.html#Data_manipulation","Path for visjs browser UI"]],"name":"visjs","notes":[],"shape":"dot","x":-861,"y":-73,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"15","label":"15: vscode","links":[],"name":"vscode","notes":[],"shape":"dot","x":50,"y":-188,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"16","label":"16: ctrl+H to do find and replace","links":[],"name":"ctrl+H to do find and replace","notes":[],"shape":"dot","x":142,"y":-375,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"17","label":"17: shift alt F to autoformat","links":[],"name":"shift alt F to autoformat","notes":[],"shape":"dot","x":-146,"y":-132,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"18","label":"18: shift alt a to mass comment","links":[],"name":"shift alt a to mass comment","notes":[],"shape":"dot","x":237,"y":-125,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"19","label":"19: git tutorial","links":[],"name":"git tutorial","notes":[{"content":"To use Git to make the current directory a repository, commit your changes, and upload them to GitHub, you can follow these steps:","timestamp":"2023-05-24 09:42:04.000099"},{"content":"1) Initialize a Git repository:\n\nOpen a terminal or command prompt in the current directory.\nRun the following command to initialize a Git repository:\n\ngit init","timestamp":"2023-05-24 09:42:16.000987"},{"content":"2) Add your files to the repository:\n\nUse the following command to add all the files in the current directory to the repository:\n\ngit add .","timestamp":"2023-05-24 09:42:31.000978"},{"content":"3) Commit your changes:\n\nCommitting creates a snapshot of your files at a specific point in time. Use the following command to commit your changes:\n\ngit commit -m \"Your commit message here\"","timestamp":"2023-05-24 09:42:57.000593"},{"content":"4) Create a repository on GitHub:\n\nGo to GitHub (https://github.com) and log in to your account.\nClick on the \"+\" sign in the top right corner and select \"New repository\".\nGive your repository a name, choose the options you prefer, and click on \"Create repository\".","timestamp":"2023-05-24 09:43:12.000330"},{"content":"5) Add the remote repository:\n\nIn the terminal or command prompt, run the following command to add the remote repository URL to your local repository:\n\ngit remote add origin <remote_repository_url>","timestamp":"2023-05-24 09:43:25.000074"},{"content":"6) Push your changes to GitHub:\n\nRun the following command to push your changes to the remote repository on GitHub:\n\ngit push -u origin master\n\n(This command pushes your changes to the \"master\" branch. If you are using a different branch, replace \"master\" with the appropriate branch name.)","timestamp":"2023-05-24 09:44:21.000248"},{"content":"If needed, one can use git remote remove origin.","timestamp":"2023-05-24 09:52:47.000305"},{"content":"Careful about large file sizes when uploading to github. Separate those files from the .git repository","timestamp":"2023-05-24 10:01:27.000569"}],"shape":"dot","x":-227,"y":591,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"20","label":"20: fuse box with power sensors?","links":[],"name":"fuse box with power sensors?","notes":[],"shape":"dot","x":957,"y":249,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"21","label":"21: git init","links":[],"name":"git init","notes":[],"shape":"dot","x":-413,"y":500,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"22","label":"22: git add .","links":[],"name":"git add .","notes":[],"shape":"dot","x":-503,"y":311,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"23","label":"23: git commit -m \"message\"","links":[],"name":"git commit -m \"message\"","notes":[],"shape":"dot","x":-454,"y":106,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"24","label":"24: create repository","links":[],"name":"create repository","notes":[],"shape":"dot","x":-257,"y":50,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"25","label":"25: git remote add origin <url>","links":[],"name":"git remote add origin <url>","notes":[],"shape":"dot","x":-58,"y":95,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"26","label":"26: git push -u origin <branch>","links":[],"name":"git push -u origin <branch>","notes":[{"content":"master branch is master","timestamp":"2023-05-24 10:08:08.000545"}],"shape":"dot","x":-555,"y":-73,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"27","label":"27: ctrl+G to navigate to a specific linec","links":[],"name":"ctrl+G to navigate to a specific linec","notes":[],"shape":"dot","x":47,"y":13,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"28","label":"28: Electron tutorial","links":[],"name":"Electron tutorial","notes":[{"content":"Step 1: Install Prerequisites<br>Before you begin, make sure you have the following installed on your machine:<br><br>Node.js: Visit the Node.js website (https://nodejs.org) and download the LTS version for your operating system. Follow the installation instructions provided.","timestamp":"2023-05-25 09:43:21.000962"},{"content":"Step 2: Initialize Your Project<br><br>Open a terminal or command prompt.<br>Create a new directory for your Electron app: mkdir my-electron-app<br>Navigate to the newly created directory: cd my-electron-app<br>Initialize a new Node.js project by running: npm init -y","timestamp":"2023-05-25 09:43:29.000689"},{"content":"Step 3: Install Electron<br><br>In the terminal, run the following command to install Electron as a development dependency in your project: npm install electron --save-dev","timestamp":"2023-05-25 09:43:38.000178"},{"content":"Step 4: Create the Main Script and HTML File<br><br>Inside your project directory, create a new folder named src.<br>Create a new JavaScript file named main.js inside the src folder. This file will contain the main Electron script.<br>Open main.js in a text editor and add the following code:<br><br>const { app, BrowserWindow } = require('electron');<br><br>function createWindow() {<br>  const mainWindow = new BrowserWindow({<br>    width: 800,<br>    height: 600,<br>    webPreferences: {<br>      nodeIntegration: true // Enable Node.js integration<br>    }<br>  });<br><br>  // Load your HTML file<br>  mainWindow.loadFile('index.html');<br>}<br><br>app.whenReady().then(createWindow);<br><br>Save main.js.<br>Create a new HTML file named index.html inside the src folder. This file will serve as the main window content.<br>Customize index.html according to your app's requirements.","timestamp":"2023-05-25 09:43:59.000971"},{"content":"Step 5: Update the package.json File<br><br>Open package.json in a text editor.<br>Add the following \"scripts\" field to the JSON object:<br><br>\"scripts\": {<br>  \"start\": \"electron .\"<br>},<br><br>Save package.json.","timestamp":"2023-05-25 09:44:12.000483"},{"content":"Step 6: Run Your Electron App<br><br>In the terminal, run the following command to start your Electron app: npm start.<br>Congratulations! Your Electron app should now launch with the window defined in index.html.<br><br>You can further extend your app by adding additional functionality, handling events, and leveraging Electron's APIs. The Electron documentation (https://www.electronjs.org/docs) provides detailed information on how to use Electron to build powerful desktop applications.","timestamp":"2023-05-25 09:44:19.000034"},{"content":"Make sure to set the \"main\" property in package.json to src/main.js. Also, in your main.js file, set the full path for the html file<br><br>(I've noticed later that the full path is not necessary. src/index.html seems to work fine)","timestamp":"2023-05-25 09:44:45.000218"}],"shape":"dot","x":-199,"y":-699,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"29","label":"29: Electron Standalone","links":[],"name":"Electron Standalone","notes":[{"content":"To create a standalone executable (.exe) file for your Electron app, you can use a packaging tool like electron-builder. Here's a step-by-step guide:","timestamp":"2023-05-25 09:52:25.000929"},{"content":"Step 1: Install electron-builder<br><br>Open a terminal or command prompt.<br>Navigate to your project directory if you're not already there: cd my-electron-app.<br>Run the following command to install electron-builder as a development dependency: npm install electron-builder --save-dev.","timestamp":"2023-05-25 09:52:30.000354"},{"content":"Step 2: Configure electron-builder<br><br>Create a new file named electron-builder.yml in your project directory.<br>Open electron-builder.yml in a text editor.<br>Add the following content to configure electron-builder:<br><br>appId: com.example.my-electron-app<br>productName: My Electron App<br>directories:<br>  output: dist<br>win:<br>  target: nsis<br><br>Customize the appId and productName fields according to your app's details.","timestamp":"2023-05-25 09:53:08.000002"},{"content":"Step 3: Update package.json<br><br>Open package.json in a text editor.<br>Add the following \"build\" field to the JSON object:<br><br>\"build\": {<br>  \"appId\": \"com.example.my-electron-app\",<br>  \"productName\": \"My Electron App\",<br>  \"directories\": {<br>    \"output\": \"dist\"<br>  },<br>  \"win\": {<br>    \"target\": \"nsis\"<br>  }<br>}<br><br>(You also need to make sure the \"scripts\" tag has the following elements: \"scripts\": {<br>  \"start\": \"electron .\",<br>  \"build\": \"electron-builder\"<br>},)<br><br>Save package.json.","timestamp":"2023-05-25 09:53:46.000122"},{"content":"Step 4: Build the Electron App<br><br>In the terminal, run the following command to build your Electron app: npm run build.<br>This command will compile your app and package it into a standalone executable file.","timestamp":"2023-05-25 09:53:55.000362"},{"content":"Step 5: Locate the Executable<br>After the build process completes successfully, the packaged executable file will be available in the dist directory of your project.","timestamp":"2023-05-25 09:54:02.000266"},{"content":"Congratulations! You now have a standalone .exe file for your Electron app. You can distribute this file to users or install it on your own machine to run the app independently.","timestamp":"2023-05-25 09:54:06.000369"}],"shape":"dot","x":-14,"y":-791,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"30","label":"30: Electron Tabs","links":[["https://www.npmjs.com/package/electron-tabs",""]],"name":"Electron Tabs","notes":[],"shape":"dot","x":116,"y":-949,"val":4},{"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"files":[],"id":"31","label":"31: Capacitor (Mobile Electron Wrapper)","links":[],"name":"Capacitor (Mobile Electron Wrapper)","notes":[{"content":"Electron apps are primarily designed for desktop platforms, such as Windows, macOS, and Linux. By default, Electron does not provide official support for mobile platforms like iOS or Android.<br><br>However, there are frameworks and tools available that allow you to package and deploy web applications (including Electron apps) as native mobile apps. These frameworks typically wrap the Electron app within a WebView component and provide additional functionality to bridge the gap between web technologies and mobile platforms.<br><br>One such framework is Capacitor, which allows you to build cross-platform mobile apps using web technologies and package them as native apps. Capacitor provides a WebView-based runtime for running web apps on mobile devices and exposes a set of APIs to access native device capabilities. With Capacitor, you can package your Electron app as a mobile app and distribute it on iOS and Android platforms.<br><br>Keep in mind that adapting an Electron app for mobile platforms may require modifications to the user interface and app functionality to provide a seamless and optimized experience on smaller touch-based screens. Additionally, certain desktop-specific features may not be available or may need to be replaced with mobile-specific equivalents.<br><br>It's recommended to thoroughly research and evaluate the available frameworks and tools for converting Electron apps to mobile platforms, consider the limitations and differences between desktop and mobile environments, and thoroughly test your app on different devices to ensure compatibility and performance.","timestamp":"2023-05-25 10:24:25.000539"}],"shape":"dot","x":-38,"y":257,"val":4},{"id":32,"label":"32: cd folder","name":"cd folder","x":-242,"y":-496,"shape":"dot","notes":[],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":33,"label":"33: npm init -y","name":"npm init -y","x":-396,"y":-369,"shape":"dot","notes":[],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":34,"label":"34: npm install electron --save-dev","name":"npm install electron --save-dev","x":-598,"y":-405,"shape":"dot","notes":[],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":35,"label":"35: write scripts","name":"write scripts","x":-789,"y":-482,"shape":"dot","notes":[],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":36,"label":"36: npm start","name":"npm start","x":-991,"y":-520,"shape":"dot","notes":[],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"37","label":"37: git reset","name":"git reset","x":-709,"y":337,"shape":"dot","notes":[{"content":"use this to remove the node_modules folder which is always a bitch","timestamp":"2023-06-02 14:56:54.000930"}],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"38","label":"38: .gitignore","name":".gitignore","x":-534,"y":669,"shape":"dot","notes":[{"content":"make a file named .gitignore and add the directory you wish to ignore there","timestamp":"2023-06-02 15:01:57.000117"},{"content":"# Ignore my-directory<br>node_modules/<br><br># Ignore temporary files<br>*.tmp<br><br># Ignore log files<br>*.log","timestamp":"2023-06-02 15:03:07.000118"}],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"39","label":"39: npm","name":"npm","x":-1071,"y":119,"shape":"dot","notes":[],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"40","label":"40: npm list <module>","name":"npm list <module>","x":-1049,"y":323,"shape":"dot","notes":[{"content":"lists the version of the module in the current node app. <br><br>npm list -g <module> checks the global installation","timestamp":"2023-06-02 17:08:42.000483"}],"links":[],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"41","label":"41: electron browser","name":"electron browser","x":-355,"y":-836,"shape":"dot","notes":[],"links":[["https://javascript.plainenglish.io/create-a-browser-with-react-js-and-electron-d75f30b6bcec","tutorial on quickly making a browser"],["https://github.com/pbarbiero/basic-electron-react-boilerplate","boilerplate"]],"files":[],"color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"42","label":"42: dir C:\\*.pdf* /s > pdf_search.txt","name":"dir C:\\*.pdf* /s > pdf_search.txt","x":701,"y":-10,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-06-15 19:18:48.000844","color":"00a500","val":4},{"id":"43","label":"43: change directory","name":"change directory","x":-111,"y":761,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-06-26 14:09:27.000502","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"44","label":"44: git clone <repository-url>","name":"git clone <repository-url>","x":-23,"y":948,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-06-26 14:09:45.000583","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"45","label":"45: javascript","name":"javascript","x":473,"y":-820,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-06-27 16:52:01.000353","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"46","label":"46: promises","name":"promises","x":528,"y":-632,"shape":"dot","notes":[{"content":"In JavaScript, .then is a method used in conjunction with Promises to handle asynchronous operations and perform actions based on the outcome of those operations.<br><br>When working with asynchronous operations, such as making an API request or reading a file, JavaScript returns a Promise object that represents the eventual completion or failure of that operation. Promises allow you to write code that is easier to read and maintain, especially when dealing with multiple asynchronous operations.<br><br>The .then method is used to attach a callback function to a Promise. It takes one or two arguments: the success callback function and an optional error callback function. The success callback is executed when the Promise is resolved (fulfilled), indicating that the operation completed successfully. The error callback is executed when the Promise is rejected, indicating that the operation encountered an error.<br><br>Here's a basic example that demonstrates the usage of .then:","timestamp":"2023-06-27 16:52:47.000065"},{"content":"fetch('https://api.example.com/data') // Example API request<br>  .then(response => response.json()) // Parse response as JSON<br>  .then(data => {<br>    // Process the data<br>    console.log(data);<br>  })<br>  .catch(error => {<br>    // Handle any errors that occurred during the process<br>    console.error('An error occurred:', error);<br>  });","timestamp":"2023-06-27 16:52:50.000520"},{"content":"In the example above, fetch is a built-in function for making HTTP requests. It returns a Promise that resolves with a response object. The first .then callback function converts the response to JSON format. The second .then callback function processes the data retrieved from the API. If any errors occur during the process, the .catch callback function handles them.<br><br>Using .then allows you to chain multiple asynchronous operations together, making your code more readable and maintaining a linear flow even though the operations may take different amounts of time to complete.","timestamp":"2023-06-27 16:52:54.000496"},{"content":"What operations allow for .then?","timestamp":"2023-06-27 16:54:53.000899"},{"content":"ChatGPT:<br><br>The .then method can be used with any operation that returns a Promise. Several built-in JavaScript functions and APIs provide Promises by default, while you can also create your own Promises.<br><br>Here are some common operations that allow for the usage of .then:<br><br>Fetching data from an API:<br>The fetch function returns a Promise that resolves with a response object. You can use .then to handle the response and process the data.<br><br>Reading files:<br>File reading operations, such as the FileReader API or the readFile function in Node.js, typically return Promises. You can chain .then to handle the contents of the file after it has been read.<br><br>Making HTTP requests:<br>Libraries like Axios and jQuery's AJAX functions return Promises for handling asynchronous HTTP requests. You can use .then to work with the response data.<br><br>Timer functions:<br>Functions like setTimeout and setInterval return Promises in modern JavaScript environments. You can use .then to perform actions after a specified delay or at regular intervals.<br><br>Database queries:<br>When working with databases, libraries like MongoDB, MySQL, or PostgreSQL often provide Promises for executing queries. You can use .then to handle the query results or any errors that occur.<br><br>Custom asynchronous operations:<br>You can create your own Promises using the Promise constructor and resolve or reject them based on the outcome of your asynchronous logic. You can then use .then to handle the resolved value or .catch to handle any rejections.<br><br>In general, any operation that returns a Promise can be used with .then to perform actions based on the result of that operation. The .then method allows you to handle the asynchronous response in a structured and readable manner, making your code easier to work with.","timestamp":"2023-06-27 16:55:07.000513"},{"content":"what is the promise constructor?","timestamp":"2023-06-27 16:56:49.000218"},{"content":"ChatGPT:<br><br>In JavaScript, the Promise constructor is a built-in feature that allows you to create new Promise objects. A Promise represents the eventual completion (or failure) of an asynchronous operation and provides a way to handle the result of that operation when it becomes available.<br><br>The Promise constructor takes a callback function as its argument, which is executed immediately when the Promise is created. This callback function, also known as the executor function, receives two parameters: resolve and reject.<br><br>The resolve parameter is a function that, when called, transitions the Promise from the pending state to the fulfilled (or resolved) state. It indicates that the asynchronous operation has completed successfully, optionally passing a value as the result of the operation.<br><br>The reject parameter is a function that, when called, transitions the Promise from the pending state to the rejected state. It indicates that the asynchronous operation encountered an error, optionally passing an error object to describe the failure.<br><br>Here's a basic example that demonstrates the usage of the Promise constructor:","timestamp":"2023-06-27 16:56:59.000178"},{"content":"const myPromise = new Promise((resolve, reject) => {<br>  // Simulating an asynchronous operation<br>  setTimeout(() => {<br>    const randomNumber = Math.random();<br><br>    if (randomNumber > 0.5) {<br>      resolve(randomNumber); // Operation succeeded<br>    } else {<br>      reject(new Error('Operation failed')); // Operation failed<br>    }<br>  }, 2000);<br>});<br><br>// Handling the Promise using .then and .catch<br>myPromise<br>  .then(result => {<br>    console.log('Operation succeeded:', result);<br>  })<br>  .catch(error => {<br>    console.log('Operation failed:', error);<br>  });","timestamp":"2023-06-27 16:57:02.000626"},{"content":"In the example above, the Promise constructor is used to create a new Promise object called myPromise. Inside the executor function, a simulated asynchronous operation is performed using setTimeout. If the generated random number is greater than 0.5, the Promise is resolved with the random number. Otherwise, it is rejected with an error object.<br><br>After creating the Promise, you can chain the .then method to handle the resolved value and the .catch method to handle any rejections. The success callback passed to .then is executed when the Promise is resolved, and the error callback passed to .catch is executed when the Promise is rejected.<br><br>The Promise constructor is a powerful tool for managing asynchronous operations in JavaScript, providing a standardized way to handle success and failure cases.","timestamp":"2023-06-27 16:57:07.000771"}],"links":[],"files":[],"timestamp":"2023-06-27 16:52:09.000142","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"47","label":"47: visjs","name":"visjs","x":602,"y":-973,"shape":"dot","notes":[{"content":"npm install vis","timestamp":"2023-06-27 17:19:05.000548"}],"links":[],"files":[],"timestamp":"2023-06-27 17:18:51.000287","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"48","label":"48: cytoscape","name":"cytoscape","x":1035,"y":-637,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-06-27 17:42:47.000459","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"49","label":"49: webGL","name":"webGL","x":732,"y":-1199,"shape":"dot","notes":[],"links":[["https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL","MDN webGL"]],"files":[],"timestamp":"2023-06-27 21:42:44.000707","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"50","label":"50: malware","name":"malware","x":128,"y":-545,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-07-19 18:03:51.000474","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"51","label":"51: openAI","name":"openAI","x":58,"y":-1214,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-07-22 05:39:58.000287","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"52","label":"52: api key","name":"api key","x":266,"y":-1246,"shape":"dot","notes":[{"content":"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","timestamp":"2023-07-22 05:40:19.000017"}],"links":[],"files":[],"timestamp":"2023-07-22 05:40:02.000677","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"53","label":"53: cybersecurity","name":"cybersecurity","x":-680.5019372466815,"y":-959.7863497954877,"shape":"dot","notes":[],"links":[["https://haveibeenpwned.com/",""],["https://www.youtube.com/watch?v=qjz_07-DvE0","Ryan Montogomery"]],"files":[],"timestamp":"2023-07-26 03:37:39.000984","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4},{"id":"54","label":"54: docker","name":"docker","x":1345.5764139590856,"y":377.9602888086643,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-07-30 18:54:03.000685","color":"00a500","val":4},{"id":"55","label":"55: plans","name":"plans","x":1402.5169675090253,"y":183.16365824308068,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-07-30 18:54:06.000688","color":"00a500","val":4},{"id":"56","label":"56: trheejs","name":"trheejs","x":1432.4856799037304,"y":333.0072202166065,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-07-30 18:54:11.000731","color":"00a500","val":4},{"id":"57","label":"57: web dev","name":"web dev","x":1345.5764139590856,"y":-110.52972322503007,"shape":"dot","notes":[],"links":[],"files":[],"timestamp":"2023-07-30 18:54:17.000039","color":"00a500","val":4},{"id":"58","label":"58: threejs","name":"threejs","x":1299.7402034791132,"y":-250.05798238286212,"shape":"dot","notes":[],"links":[["https://observablehq.com/@grantcuster/using-three-js-for-2d-data-visualization",""],["https://threejs.org/manual/#en/fundamentals",""]],"files":[],"timestamp":"2023-07-31 04:24:07.000309","color":{"background":"#000000","border":"#183e61","highlight":{"background":"#141414","border":"#183e61"}},"val":4}],"edges":[{"arrows":"to","id":"2d09c413-537a-4b1b-a597-d7cb9c1738ff","source":"0","target":"6"},{"arrows":"to","id":"07057f79-8e53-4d85-972b-b06d7c1003d4","source":"0","target":"7"},{"arrows":"to","id":"2001d34d-e11f-4174-8b65-34569ed88c92","source":"0","target":"8"},{"arrows":"to","id":"f8cb5ddf-36b0-4720-ae1a-fab4764b9190","source":"0","target":"11"},{"arrows":"to","id":"11ea0e79-cdbf-4185-a7d3-9ab52d3c599d","source":"10","target":"5"},{"arrows":"to","id":"f18aa3a6-a4e0-47cf-906e-952a3ee98c3f","source":"10","target":"4"},{"arrows":"to","id":"b4cc3106-7374-46bb-9618-ce882f5c32d5","source":"10","target":"3"},{"arrows":"to","id":"1841157d-8dbe-47d9-92b1-51832fa8f402","source":"10","target":"2"},{"arrows":"to","id":"acd7cd2a-a913-4b5d-9e8a-b9870a470d4c","source":"10","target":"1"},{"arrows":"to","id":"765a7f0b-8053-4b18-9543-fb9587fae9d9","source":"11","target":"9"},{"arrows":"to","id":"80da2e31-b5f4-46df-8de0-d4b5ebad16c5","source":"12","target":"13"},{"arrows":"to","id":"94bf46e6-8f11-422b-ad80-07b5ef004836","source":"15","target":"16"},{"arrows":"to","id":"d40579c8-2849-4aba-b91d-6aafb0613d8a","source":"15","target":"17"},{"arrows":"to","id":"30637a2c-b82c-4664-a38c-6083e7777be9","source":"15","target":"18"},{"arrows":"to","id":"946926fa-80d8-4c0b-99cc-4fd7aae3cb10","source":"15","target":"27"},{"arrows":"to","id":"cd056d99-fdfa-4d9f-b675-b7ea749d748d","source":"19","target":"21"},{"arrows":"to","id":"98651245-e46a-45e5-bce3-ae9c3cab583e","source":"21","target":"22"},{"arrows":"to","id":"363a5823-a6f0-4e08-a92c-88eafdaeb077","source":"22","target":"23"},{"arrows":"to","id":"ad4bd2b6-7771-49a4-8807-d76ca35c12cc","source":"23","target":"24"},{"arrows":"to","id":"58bbb40c-4bc2-48c3-a652-ead4f6d02416","source":"23","target":"26"},{"arrows":"to","id":"32d94ffa-4b2f-4935-bb03-3dad5979b0f5","source":"24","target":"25"},{"arrows":"to","id":"bab7715a-a9bf-4a7b-9c5f-0bed9d74a9a1","source":"28","target":"29"},{"arrows":"to","id":"14de6d70-a218-451c-8b49-40057a177e05","source":"29","target":"30"},{"arrows":"to","id":"8a2777c4-d524-4f24-8b49-a978d2cc56c5","source":"28","target":32},{"arrows":"to","id":"4cfdde77-e231-455f-9514-82a1ba687398","source":32,"target":33},{"arrows":"to","id":"2d087f9c-9bbb-40d3-ad29-84a026413127","source":33,"target":34},{"arrows":"to","id":"cfb7c3bd-87b8-4258-a633-d454011c0e39","source":34,"target":35},{"arrows":"to","id":"48416c28-4e1d-40ac-af1d-370b94558083","source":35,"target":36},{"arrows":"to","id":"06ba7334-8074-45fc-80cc-5df8dddd26cf","source":"22","target":"37"},{"arrows":"to","id":"4817c342-fc5f-4196-824b-dce81144c2b5","source":"21","target":"38"},{"arrows":"to","id":"20f9202f-1ba1-4d65-b305-d808c58fc152","source":"39","target":"40"},{"arrows":"to","id":"57b67d60-8010-4860-8dfe-0ba9c8581b27","source":"28","target":"41"},{"arrows":"to","id":"2b4c5b26-d270-4168-bd47-1653faecb1dd","source":"0","target":"42"},{"arrows":"to","id":"cb401863-cdad-448f-8220-209102127f18","source":"19","target":"43"},{"arrows":"to","id":"c532f887-7635-42ba-8e33-ef5da8112d92","source":"43","target":"44"},{"arrows":"to","id":"19ae22f5-a2f3-400e-8e51-eb3173cc046c","source":"45","target":"46"},{"arrows":"to","id":"82d4c360-d9d8-44e7-be8a-b2269f003490","source":"45","target":"47"},{"arrows":"to","id":"6fea7bac-97c6-428e-95bb-ef4ba78ca919","source":"51","target":"52"},{"arrows":"to","id":"6436e0f8-6147-41d2-b7c7-763628c429b1","source":"55","target":"54"},{"arrows":"to","id":"a1370b8e-2161-458a-b2a7-9c51d8a5bf3a","source":"55","target":"56"},{"arrows":"to","id":"006206f5-aa17-4958-9e20-a361197a024e","source":"55","target":"57"}],"links":[{"arrows":"to","id":"2d09c413-537a-4b1b-a597-d7cb9c1738ff","source":"0","target":"6"},{"arrows":"to","id":"07057f79-8e53-4d85-972b-b06d7c1003d4","source":"0","target":"7"},{"arrows":"to","id":"2001d34d-e11f-4174-8b65-34569ed88c92","source":"0","target":"8"},{"arrows":"to","id":"f8cb5ddf-36b0-4720-ae1a-fab4764b9190","source":"0","target":"11"},{"arrows":"to","id":"11ea0e79-cdbf-4185-a7d3-9ab52d3c599d","source":"10","target":"5"},{"arrows":"to","id":"f18aa3a6-a4e0-47cf-906e-952a3ee98c3f","source":"10","target":"4"},{"arrows":"to","id":"b4cc3106-7374-46bb-9618-ce882f5c32d5","source":"10","target":"3"},{"arrows":"to","id":"1841157d-8dbe-47d9-92b1-51832fa8f402","source":"10","target":"2"},{"arrows":"to","id":"acd7cd2a-a913-4b5d-9e8a-b9870a470d4c","source":"10","target":"1"},{"arrows":"to","id":"765a7f0b-8053-4b18-9543-fb9587fae9d9","source":"11","target":"9"},{"arrows":"to","id":"80da2e31-b5f4-46df-8de0-d4b5ebad16c5","source":"12","target":"13"},{"arrows":"to","id":"94bf46e6-8f11-422b-ad80-07b5ef004836","source":"15","target":"16"},{"arrows":"to","id":"d40579c8-2849-4aba-b91d-6aafb0613d8a","source":"15","target":"17"},{"arrows":"to","id":"30637a2c-b82c-4664-a38c-6083e7777be9","source":"15","target":"18"},{"arrows":"to","id":"946926fa-80d8-4c0b-99cc-4fd7aae3cb10","source":"15","target":"27"},{"arrows":"to","id":"cd056d99-fdfa-4d9f-b675-b7ea749d748d","source":"19","target":"21"},{"arrows":"to","id":"98651245-e46a-45e5-bce3-ae9c3cab583e","source":"21","target":"22"},{"arrows":"to","id":"363a5823-a6f0-4e08-a92c-88eafdaeb077","source":"22","target":"23"},{"arrows":"to","id":"ad4bd2b6-7771-49a4-8807-d76ca35c12cc","source":"23","target":"24"},{"arrows":"to","id":"58bbb40c-4bc2-48c3-a652-ead4f6d02416","source":"23","target":"26"},{"arrows":"to","id":"32d94ffa-4b2f-4935-bb03-3dad5979b0f5","source":"24","target":"25"},{"arrows":"to","id":"bab7715a-a9bf-4a7b-9c5f-0bed9d74a9a1","source":"28","target":"29"},{"arrows":"to","id":"14de6d70-a218-451c-8b49-40057a177e05","source":"29","target":"30"},{"arrows":"to","id":"8a2777c4-d524-4f24-8b49-a978d2cc56c5","source":"28","target":32},{"arrows":"to","id":"4cfdde77-e231-455f-9514-82a1ba687398","source":32,"target":33},{"arrows":"to","id":"2d087f9c-9bbb-40d3-ad29-84a026413127","source":33,"target":34},{"arrows":"to","id":"cfb7c3bd-87b8-4258-a633-d454011c0e39","source":34,"target":35},{"arrows":"to","id":"48416c28-4e1d-40ac-af1d-370b94558083","source":35,"target":36},{"arrows":"to","id":"06ba7334-8074-45fc-80cc-5df8dddd26cf","source":"22","target":"37"},{"arrows":"to","id":"4817c342-fc5f-4196-824b-dce81144c2b5","source":"21","target":"38"},{"arrows":"to","id":"20f9202f-1ba1-4d65-b305-d808c58fc152","source":"39","target":"40"},{"arrows":"to","id":"57b67d60-8010-4860-8dfe-0ba9c8581b27","source":"28","target":"41"},{"arrows":"to","id":"2b4c5b26-d270-4168-bd47-1653faecb1dd","source":"0","target":"42"},{"arrows":"to","id":"cb401863-cdad-448f-8220-209102127f18","source":"19","target":"43"},{"arrows":"to","id":"c532f887-7635-42ba-8e33-ef5da8112d92","source":"43","target":"44"},{"arrows":"to","id":"19ae22f5-a2f3-400e-8e51-eb3173cc046c","source":"45","target":"46"},{"arrows":"to","id":"82d4c360-d9d8-44e7-be8a-b2269f003490","source":"45","target":"47"},{"arrows":"to","id":"6fea7bac-97c6-428e-95bb-ef4ba78ca919","source":"51","target":"52"},{"arrows":"to","id":"6436e0f8-6147-41d2-b7c7-763628c429b1","source":"55","target":"54"},{"arrows":"to","id":"a1370b8e-2161-458a-b2a7-9c51d8a5bf3a","source":"55","target":"56"},{"arrows":"to","id":"006206f5-aa17-4958-9e20-a361197a024e","source":"55","target":"57"}]}